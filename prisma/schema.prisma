generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                 Int                @id @default(autoincrement())
  fullName           String
  email              String             @unique
  password           String
  role               UserRole           @default(USER)
  verified           DateTime
  Cart               Cart?
  provider           String?
  providerId         String?
  orders             Order[]
  VerificationCode   VerificationCode?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductItem {
  id        Int       @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id         Int          @id @default(autoincrement())
  name       String
  imageUrl   String
  cartItems  CartItem[]
  category   Category     @relation(fields: [categoryId], references: [id])
  categoryId Int
  ingredients Ingredient[]
  Items      ProductItem[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Ingredient {
  id         Int          @id @default(autoincrement())
  name       String
  price      Int
  imageUrl   String
  products   Product[]
  cartItems  CartItem[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Cart {
  id          Int          @id @default(autoincrement())
  user        User?        @relation(fields: [userId], references: [id])
  userId      Int?         @unique
  token       String?
  totalAmount Int          @default(0)
  items       CartItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model CartItem {
  id          Int          @id @default(autoincrement())
  product     Product      @relation(fields: [productId], references: [id])
  productId   Int
  cart        Cart         @relation(fields: [cartId], references: [id])
  cartId      Int
  quantity    Int
  ingredients Ingredient[]
  price       Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Order {
  id          Int          @id @default(autoincrement())
  user        User?        @relation(fields: [userId], references: [id])
  userId      Int
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  address     String
  email       String
  phone       String
  comment     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model VerificationCode {
  id        Int       @id @default(autoincrement())
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int       @unique
  code      String
  createdAt DateTime  @default(now())
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  ADMIN
  USER
}
