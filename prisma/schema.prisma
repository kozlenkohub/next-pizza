generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

model User {
  id           String            @id @default(uuid())
  name         String
  role         Role              @default(USER)
  cart         Cart?
  order        Order[]
  email        String            @unique
  password     String
  verified     Boolean           @default(false)
  provider     String?
  providerId   String?
  verification VerificationCode?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(255)
  items       ProductItem[]
  imageUrl    String
  published   Boolean       @default(true)
  category    Category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String?
  ingredients Ingredient[]  @relation("ProductIngredient")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductItem {
  id        String     @id @default(uuid())
  price     Int
  size      Int?
  cartItem  CartItem[]
  product   Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
  pizzaType Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Ingredient {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(255)
  price     Int
  products  Product[]  @relation("ProductIngredient")
  cartItem  CartItem[] @relation("IngredientToCartItem")
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Cart {
  id          String     @id @default(uuid())
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?    @unique
  token       String?    @unique
  cartItem    CartItem[] @relation("CartToCartItem")
  totalAmount Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model CartItem {
  id            String       @id @default(uuid())
  cart          Cart?        @relation(name: "CartToCartItem", fields: [cartId], references: [id], onDelete: Cascade)
  cartId        String?
  quantity      Int          @default(0)
  ingredients   Ingredient[] @relation("IngredientToCartItem")
  productItem   ProductItem  @relation(fields: [productItemId], references: [id], onDelete: Cascade)
  productItemId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?     @unique
  token       String?
  items       Json
  status      OrderStatus
  paymentId   String?
  totalAmount Int

  email    String
  phone    String
  address  String
  comment  String?
  fullName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id        String   @id @default(uuid())
  code      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, code])
}
